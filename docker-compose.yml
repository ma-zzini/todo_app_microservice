volumes:
  postgres_data:

networks:
  trello-net:
    name: trello-net
    driver: bridge

services:
  db:
    container_name: db-ps
    image: postgres:alpine
    env_file:
      - .env
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '${PORT_DB}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - trello-net

  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8080:8080
  #   depends_on:
  #     - db
  #   networks:
  #     - trello-net

  auth:
    container_name: auth
    build:
      dockerfile: ./apps/auth/Dockerfile
      target: development
      context: .
    command: npm run start:dev auth
    restart: always
    env_file:
      - .env
    ports:
      - '${PORT_AUTH}:3000'
    develop:
      watch:
        - action: sync
          path: ./apps/auth
          target: /usr/src/app/apps/auth
          ignore:
            - node_modules/
        - action: sync
          path: ./libs
          target: /usr/src/app/libs
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
    depends_on:
      - db
    networks:
      - trello-net

  todo:
    container_name: todo
    build:
      dockerfile: ./apps/todo/Dockerfile
      target: development
      context: .
    command: npm run start:dev
    restart: always
    env_file:
      - .env
    ports:
      - '${PORT_TODO}:3000'
    develop:
      watch:
        - action: sync
          path: ./apps/todo
          target: /usr/src/app/apps/todo
          ignore:
            - node_modules/
        - action: sync
          path: ./libs
          target: /usr/src/app/libs
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
    depends_on:
      - db
    networks:
      - trello-net
